{
  "version": 3,
  "sources": ["../lib/utils.ts", "../lib/iframe.ts", "../lib/parent.ts"],
  "sourcesContent": ["/**\n * \u83B7\u53D6\u552F\u4E00\u503C\n * @returns \n */\n export const getUID = () => {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);\n        return v.toString(16);\n    });\n}", "import type { IConfig, Message, MessageHandler } from \"./message\";\nimport { getUID } from \"./utils\";\n\nconst taskMap = new Map<string, MessageHandler>()\n\n/**\n * connect parent window\n * @param c iframe config\n * @returns \n */\nexport const useConnectParent = (c: IConfig) => {\n\n    const config: IConfig = {\n        timeout: 5000\n    }\n\n    Object.assign(config, c)\n\n    /**\n     * send message to parent window\n     * @param type \n     * @param data \n     */\n    const postMessage = (type: string, ...args: any[]) => {\n        const uid = getUID()\n        window.parent.postMessage({\n            type,\n            uid,\n            ...args\n        })\n        return {\n            uid,\n            type\n        }\n    }\n\n    /**\n     * send promise message to parent window\n     * @param type \n     * @param data \n     * @returns \n     */\n    const postPromiseMessage = <T = any>(type: string, data: T) => {\n        return new Promise((resolve, reject) => {\n            const {uid} = postMessage(type, {\n                data,\n                isPromise: true\n            })\n            \n            const timeout = setTimeout(() => {\n                taskMap.delete(uid)\n                reject(new Error('timeout'))\n            }, config.timeout)\n\n            /**\n             * set message handler by uid\n             */\n            taskMap.set(uid, (data: any) => {\n                clearTimeout(timeout)\n                taskMap.delete(uid)\n                resolve(data)\n            })\n        })\n    }\n\n    const handleMessage = (evt: MessageEvent<Message>) => {\n        const { data, type, uid } = evt.data\n        if (taskMap.has(uid)) {\n            taskMap.get(uid)?.({\n                type,\n                data\n            })\n        } else {\n            // handle message\n        }\n    }\n\n    const addlistenerMessage = () => {\n        window.addEventListener('message', handleMessage)\n    }\n\n    const removeListenerMessage = () => {\n        window.addEventListener('message', handleMessage)\n    }\n\n    return {\n        addlistenerMessage,\n        removeListenerMessage,\n        postMessage,\n        postPromiseMessage\n    }\n}", "import type { IConfig, Message, MessageHandler } from \"./message\"\nimport { getUID } from \"./utils\"\n\nexport const parentTaskMap = new Map<string, MessageHandler>()\n\n/**\n * connect iframe window config\n */\nexport interface IConnectIframeConfig extends IConfig {\n    /**\n     * iframe dom element\n     */\n    iframe?: HTMLIFrameElement\n    /**\n     * callback \n     */\n     callback?: (message: Message) => void\n}\n\n/**\n * connect iframe to post message\n * @param c iframe config\n */\nexport const useConnectIframe = (c: IConnectIframeConfig) => {\n\n    const config: IConnectIframeConfig = {\n        timeout: 5000\n    }\n\n    Object.assign(config, c)\n\n    if (!config.iframe) {\n        throw new Error('iframe is required')\n    }\n\n    /**\n     * iframe window\n     */\n    const parent = config.iframe.contentWindow!\n\n    /**\n     * send message to iframe\n     * @param type \n     * @param data \n     */\n    const postMessage = <T = any>(type: string, data: T) => {\n        parent.postMessage({\n            type,\n            data,\n        })\n    }\n\n    /**\n     * reply message to iframe\n     * @param type \n     * @param data \n     * @returns \n     */\n    const replyPromiseMessage = <T = any>(message: Message<T>) => {\n        window.parent.postMessage(message)\n    }\n\n    /**\n     * handle message from iframe\n     */\n    const handleMessage = (event: MessageEvent<Message>) => {\n        config.callback?.(event.data)\n    }\n\n    /**\n     * listen message from parent window\n     */\n    const listenMessage = () => {\n        parent.addEventListener('message', handleMessage)\n    }\n\n    const unListenMessage = () => {\n        parent.removeEventListener('message', handleMessage)\n    }\n\n    return {\n        postMessage,\n        listenMessage,\n        unListenMessage,\n        replyPromiseMessage,\n    }\n}"],
  "mappings": "yWAIQ,IAAMA,EAAS,IACZ,uCAAuC,QAAQ,QAAS,SAASC,EAAG,CACvE,IAAIC,EAAI,KAAK,OAAO,EAAE,GAAG,EAAGC,EAAIF,GAAK,IAAMC,EAAKA,EAAE,EAAI,EACtD,OAAOC,EAAE,SAAS,EAAE,CACxB,CAAC,ECLL,IAAMC,EAAU,IAAI,IAOPC,EAAoBC,GAAe,CAE5C,IAAMC,EAAkB,CACpB,QAAS,GACb,EAEA,OAAO,OAAOA,EAAQD,CAAC,EAOvB,IAAME,EAAc,CAACC,KAAiBC,IAAgB,CAClD,IAAMC,EAAMC,EAAO,EACnB,cAAO,OAAO,YAAYC,EAAA,CACtB,KAAAJ,EACA,IAAAE,GACGD,EACN,EACM,CACH,IAAAC,EACA,KAAAF,CACJ,CACJ,EAQMK,EAAqB,CAAUL,EAAcM,IACxC,IAAI,QAAQ,CAACC,EAASC,IAAW,CACpC,GAAM,CAAC,IAAAN,CAAG,EAAIH,EAAYC,EAAM,CAC5B,KAAAM,EACA,UAAW,EACf,CAAC,EAEKG,EAAU,WAAW,IAAM,CAC7Bd,EAAQ,OAAOO,CAAG,EAClBM,EAAO,IAAI,MAAM,SAAS,CAAC,CAC/B,EAAGV,EAAO,OAAO,EAKjBH,EAAQ,IAAIO,EAAMI,GAAc,CAC5B,aAAaG,CAAO,EACpBd,EAAQ,OAAOO,CAAG,EAClBK,EAAQD,CAAI,CAChB,CAAC,CACL,CAAC,EAGCI,EAAiBC,GAA+B,CAjE1D,IAAAC,EAkEQ,GAAM,CAAE,KAAAN,EAAM,KAAAN,EAAM,IAAAE,CAAI,EAAIS,EAAI,KAC5BhB,EAAQ,IAAIO,CAAG,KACfU,EAAAjB,EAAQ,IAAIO,CAAG,IAAf,MAAAU,EAAmB,CACf,KAAAZ,EACA,KAAAM,CACJ,GAIR,EAUA,MAAO,CACH,mBATuB,IAAM,CAC7B,OAAO,iBAAiB,UAAWI,CAAa,CACpD,EAQI,sBAN0B,IAAM,CAChC,OAAO,iBAAiB,UAAWA,CAAa,CACpD,EAKI,YAAAX,EACA,mBAAAM,CACJ,CACJ,ECxFO,IAAMQ,EAAgB,IAAI,IAoBpBC,EAAoBC,GAA4B,CAEzD,IAAMC,EAA+B,CACjC,QAAS,GACb,EAIA,GAFA,OAAO,OAAOA,EAAQD,CAAC,EAEnB,CAACC,EAAO,OACR,MAAM,IAAI,MAAM,oBAAoB,EAMxC,IAAMC,EAASD,EAAO,OAAO,cAOvBE,EAAc,CAAUC,EAAcC,IAAY,CACpDH,EAAO,YAAY,CACf,KAAAE,EACA,KAAAC,CACJ,CAAC,CACL,EAQMC,EAAgCC,GAAwB,CAC1D,OAAO,OAAO,YAAYA,CAAO,CACrC,EAKMC,EAAiBC,GAAiC,CAjE5D,IAAAC,GAkEQA,EAAAT,EAAO,WAAP,MAAAS,EAAA,KAAAT,EAAkBQ,EAAM,KAC5B,EAaA,MAAO,CACH,YAAAN,EACA,cAVkB,IAAM,CACxBD,EAAO,iBAAiB,UAAWM,CAAa,CACpD,EASI,gBAPoB,IAAM,CAC1BN,EAAO,oBAAoB,UAAWM,CAAa,CACvD,EAMI,oBAAAF,CACJ,CACJ",
  "names": ["getUID", "c", "r", "v", "taskMap", "useConnectParent", "c", "config", "postMessage", "type", "args", "uid", "getUID", "__spreadValues", "postPromiseMessage", "data", "resolve", "reject", "timeout", "handleMessage", "evt", "_a", "parentTaskMap", "useConnectIframe", "c", "config", "parent", "postMessage", "type", "data", "replyPromiseMessage", "message", "handleMessage", "event", "_a"]
}
